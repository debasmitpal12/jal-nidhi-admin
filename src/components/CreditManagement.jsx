import React, { useEffect, useState } from "react";
import {
  FaLeaf,
  FaCheckCircle,
  FaTimesCircle,
  FaClock,
  FaSeedling,
} from "react-icons/fa";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";

export default function CreditManagement() {
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    const saved = JSON.parse(localStorage.getItem("myProjects")) || [];
    const enriched = saved.map((proj) => ({
      ...proj,
      carbonCredits:
        proj.carbonCredits || Math.floor(Math.random() * 5000 + 500),
      biodiversityCredits:
        proj.biodiversityCredits || Math.floor(Math.random() * 3000 + 200),
    }));
    setProjects(enriched);
  }, []);

  return (
    <div className="p-6 md:p-10 space-y-10">
      <h2 className="text-3xl font-extrabold bg-gradient-to-r from-green-400 to-sky-400 bg-clip-text text-transparent">
        üåç Credit Management
      </h2>
      <p className="text-gray-400 mt-2 max-w-3xl">
        Manage{" "}
        <span className="font-semibold text-green-400">Carbon Credits</span> and{" "}
        <span className="font-semibold text-sky-400">Biodiversity Credits</span>{" "}
        generated by projects.
      </p>

      {projects.length === 0 ? (
        <div className="bg-slate-800/70 rounded-xl p-6 text-gray-400 border border-slate-700 text-center">
          üö´ No project credits available yet.
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {projects.map((proj, i) => (
            <div
              key={i}
              className="bg-slate-800/60 backdrop-blur-lg rounded-xl shadow-lg border border-slate-700 p-6 hover:shadow-xl hover:border-sky-500 transition-all"
            >
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-bold text-gray-100">{proj.name}</h3>
                <span
                  className={`px-3 py-1 rounded-full text-sm font-semibold flex items-center gap-1 ${
                    proj.status === "Approved"
                      ? "bg-green-500/20 text-green-400"
                      : proj.status === "Rejected"
                      ? "bg-red-500/20 text-red-400"
                      : "bg-yellow-500/20 text-yellow-400"
                  }`}
                >
                  {proj.status === "Approved" && <FaCheckCircle />}
                  {proj.status === "Rejected" && <FaTimesCircle />}
                  {proj.status === "Pending" && <FaClock />}
                  {proj.status}
                </span>
              </div>

              <div className="space-y-3 mb-4">
                <div className="flex items-center justify-between bg-slate-900/50 p-3 rounded-lg">
                  <span className="flex items-center gap-2 text-gray-300">
                    <FaLeaf className="text-green-400" /> Carbon Credits
                  </span>
                  <span className="font-semibold text-green-400">
                    {proj.carbonCredits} CR
                  </span>
                </div>
                <div className="flex items-center justify-between bg-slate-900/50 p-3 rounded-lg">
                  <span className="flex items-center gap-2 text-gray-300">
                    <FaSeedling className="text-sky-400" /> Biodiversity Credits
                  </span>
                  <span className="font-semibold text-sky-400">
                    {proj.biodiversityCredits} BD
                  </span>
                </div>
              </div>

              {/* ‚úÖ Map Preview */}
              {proj.lat && proj.lon && (
                <div className="h-48 mt-4 rounded-lg overflow-hidden border border-slate-600">
                  <MapContainer
                    center={[proj.lat, proj.lon]}
                    zoom={6}
                    scrollWheelZoom={false}
                    style={{ height: "100%", width: "100%" }}
                    whenCreated={(map) =>
                      setTimeout(() => map.invalidateSize(), 100)
                    }
                  >
                    <TileLayer
                      url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                      attribution="&copy; OpenStreetMap contributors"
                    />
                    <Marker position={[proj.lat, proj.lon]}>
                      <Popup>
                        {proj.name} <br /> {proj.location}
                      </Popup>
                    </Marker>
                  </MapContainer>
                </div>
              )}

              <div className="flex justify-end gap-3 mt-4">
                <button className="px-4 py-2 bg-green-600/80 text-white rounded-lg hover:bg-green-500 transition shadow-md">
                  Approve
                </button>
                <button className="px-4 py-2 bg-red-600/80 text-white rounded-lg hover:bg-red-500 transition shadow-md">
                  Reject
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
